#!/usr/bin/python3

"""
    全角文字の幅を2、半角文字の幅を1とした時に
    幅が99文字を超える行を検出する。
"""

import argparse
import doctest
import os
import sys
import unicodedata

LIMIT_WIDTH = 99
ENCODING_TO_TRY = ('utf-8', 'cp932', 'sjis', 'euc-jp')

IGNORE = (
    '/django/',
    '/site-packages/',
    '/virtualenv/',
)


def smart_unicode(s):
    if isinstance(s, bytes):
        for encoding in ENCODING_TO_TRY:
            try:
                s = s.decode(encoding)
            except UnicodeDecodeError:
                pass
            else:
                break
        else:
            print('Cannot handle this encode.', file=sys.stderr)
            return None
    return s.rstrip('\r\n')


def unicode_width(us):
    u"""
        >>> unicode_width(u'Prime')
        5
        >>> unicode_width(u'101は素数')
        9
        >>> unicode_width(u'素数好き')
        8
    """
    width = 0
    for uc in us:
        uc_width = unicodedata.east_asian_width(uc)
        width += 2 if uc_width in u'WFA' else 1
    return width


def check_one_file(filename, extensions):
    if extensions and not any(filename.endswith(''.join(['.', ext])) for ext in extensions):
        return

    output_filename = False
    try:
        f = open(filename, 'rb')
    except IOError:
        # シンボリックリンクが切れている場合など
        print >> sys.stderr, 'File {} is missing.'.format(filename)
        return
    else:
        for line_number, line in enumerate(f, start=1):
            line = smart_unicode(line)
            width = unicode_width(line)
            if LIMIT_WIDTH < width:
                if not output_filename:
                    print(filename)
                    output_filename = True
                print('  L.{:05d} width={:03d}: {}'.format(
                    line_number, width, line[:LIMIT_WIDTH],
                ))
    if output_filename:
        print('')


def main(args):
    if args.extensions:
        extensions = args.extensions.split(',')
    else:
        extensions = None
    for filename_or_dirname in args.filename_or_dirname:
        if os.path.isfile(filename_or_dirname):
            check_one_file(filename_or_dirname, extensions)
        else:
            for root, dirs, files in os.walk(filename_or_dirname, followlinks=True):
                if any(ignore in root for ignore in IGNORE):
                    continue
                for filename in files:
                    fullpath = os.path.join(root, filename)
                    if any(ignore in fullpath for ignore in IGNORE):
                        continue
                    check_one_file(fullpath, extensions)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='99文字を越える行を検出する')
    parser.add_argument(
        'filename_or_dirname',
        type=str, nargs='*',
        help='検出対象のファイル名 or フォルダ名')
    parser.add_argument(
        '-e', '--extension',
        dest='extensions', default='py',
        help='検出対象のファイルの拡張子をカンマ区切りで指定する')
    parser.add_argument(
        '-a', '--all',
        dest='all', action='store_true',
        help='何も除外せずに全てのファイルとフォルダを検出対象にする')

    args = parser.parse_args()
    if not args.filename_or_dirname:
        doctest.testmod()
        parser.print_help()
    else:
        main(args)
