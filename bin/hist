#!/usr/bin/python3

"""
    Find command from command history.
"""

import argparse
import datetime
import doctest
import os
import re

HISTORY_FILE = os.path.join(os.path.expanduser('~'), '.zsh_history')


def parse_line(line):
    """
        Function for abstracting datetime and command from one line.
        This should return (<datetime object>, <command string>)
    """
    dts, cmd = line.split(';', 1)
    dt = datetime.datetime.fromtimestamp(int(dts.split(':')[1].strip()))
    return (dt, cmd)


def main(args):
    keywords = args.keywords[::]
    if args.ignorecase:
        keywords = [x.lower() for x in keywords]

    src = open(HISTORY_FILE, 'rb').read().decode('utf-8', 'ignore').splitlines()

    # Merge multiple-line command to one line.
    i = 0
    while i < len(src):
        if src[i].endswith('\\'):
            src[i] = '\n                           '.join([src[i].rstrip('\\'), src[i + 1]])
            src[i + 1:i + 2] = []
        else:
            i += 1

    # Choose algorithm for matching lines.
    if args.regex:
        judge = find_regex
    elif args.lcs:
        judge = find_substring
    else:
        judge = find_simply

    # Print lines which matched with all keywords.
    for line in src:
        dt, cmd = parse_line(line)

        target = cmd
        if args.ignorecase:
            target = target.lower()

        found = True
        idx_list = []
        for keyword in keywords:
            res = judge(keyword, target)
            if not res:
                found = False
                break
            idx_list.extend(res)
        if not found:
            continue

        print('{:%Y-%m-%d %H:%M:%S} [{}]:'.format(
            dt,
            ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'][dt.weekday()],
        ), end=' ')
        idx_list = merge(idx_list)
        for s, e in reversed(idx_list):
            cmd = cmd[:s] + '\033[94m' + cmd[s:e] + '\033[0m' + cmd[e:]
        print(cmd)


def merge(idx_list):
    """
        >>> merge(((1, 10), (15, 18), (3, 5), (2, 13)))
        [(1, 13), (15, 18)]
        >>> merge([(1, 2), (2, 3), (4, 5)])
        [(1, 3), (4, 5)]
        >>> merge(((1, 10), (2, 10)))
        [(1, 10)]
        >>> merge([])
        []
    """
    if not idx_list:
        return []
    idx_list = sorted(idx_list)
    res = [idx_list[0]]
    for s, e in idx_list[1:]:
        last_s, last_e = res[-1]
        if s <= last_e:
            res[-1] = (last_s, max(last_e, e))
        else:
            res.append((s, e))
    return res


def find_simply(s, cmd):
    """
        >>> find_simply('bra', 'abracatabra')
        [(1, 4), (8, 11)]
        >>> find_simply('BRA', 'abracatabra')
        []
        >>> find_simply('', 'abracatabra')
        []
    """
    if not s:
        return []
    res = []
    base = 0
    while cmd:
        if s not in cmd:
            break
        i = cmd.index(s)
        cmd = cmd[i + len(s):]
        res.append((base + i, base + i + len(s)))
        base += i + len(s)
    return res


def find_regex(s, cmd):
    """
        >>> find_regex('a.+r', 'abracatabra')
        [(0, 10)]
        >>> find_regex('a.+?r', 'abracatabra')
        [(0, 3), (3, 10)]
        >>> find_regex('', 'abracatabra')
        []
    """
    if not s:
        return []
    res = []
    for r in re.finditer(s, cmd):
        res.append((r.start(), r.end()))
    return res


def find_substring(s, cmd):
    """
        >>> find_substring('abc', 'abracatabra')
        [(0, 1), (1, 2), (4, 5)]
        >>> find_substring('arab', 'abracatabra')
        [(0, 1), (2, 3), (3, 4), (8, 9)]
        >>> find_substring('', 'abracatabra')
        []
    """
    if not s:
        return []
    res = []
    i = j = 0
    while i < len(s) and j < len(cmd):
        if s[i] == cmd[j]:
            res.append((j, j + 1))
            i += 1
        j += 1
    if len(res) != len(s):
        return []
    return res


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Script for searching command history.')
    parser.add_argument(
        'keywords',
        type=str, nargs='*',
        help='Keyword to be searched.')
    parser.add_argument(
        '-i', '--ignore-case',
        dest='ignorecase', action='store_true',
        help='Ignore letter case.')
    parser.add_argument(
        '-r', '--regex',
        dest='regex', action='store_true',
        help='Treat keywords as regular expressions.')
    parser.add_argument(
        '-l', '--lcs',
        dest='lcs', action='store_true',
        help='Treat keywords as subsequence.\nexample: "ace" is inclucded by "abcde"')

    args = parser.parse_args()
    if not args.keywords:
        doctest.testmod()
        parser.print_help()
    else:
        main(args)
